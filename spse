#!/usr/bin/env ruby

Encoding.default_internal = "utf-8"

require 'logger'
require 'mechanize'
require 'csv'
require 'yaml'

class SPSE

  Student = Struct.new(:id, :name, :scores, :cviceni_create_url, :teorie_create_url)
  Score   = Struct.new(:scoreId, :ct, :description, :value, :weight, :employee, :date, :update_url)

  attr_accessor :dry

  def initialize &block
    @m = Mechanize.new
    @m.user_agent_alias = 'Linux Firefox'
    @dry = true
    load_session
    block.call self
    save_session
  end


  def debug
    @m.log = Logger.new($stderr)
    require 'irb'
    binding.irb
  end

  def login(user, pass)
    @page = rtr { @m.get('https://www.spsejecna.cz') } unless @page

    logged_in = if link = @page.link_with(text: 'Předměty a tematické plány')
      @page = rtr { @m.click link }
      @page.link_with(text: 'Předměty a tematické plány') ? true : false  # still logged in?
    else
      false
    end

    if logged_in
      $stderr.puts "still logged in spse"
    else
      $stderr.puts "spse login... "

      # unless this is a link, we are already on the
      # 'Pro zamstnance' page, otherwise click on it first
      if link = @page.link_with(text: 'Pro zaměstnance')
        @page = rtr { @m.click link }
      end

      2.times do
        form = @page.forms.first or raise 'no login form found'
        form.user = user
        form.pass = pass
        was_empty_token3 = form.field_with(name: 'token3').value.to_s.empty?
        begin
          @page = @m.submit(form, form.buttons.first)  
        rescue Mechanize::ResponseCodeError
          # submit redirects immediately to /, but gets 403 code; we have to wait a sec
        end
        sleep 2

        if was_empty_token3
          # update: there is 'token3' hidden field now which is empty for the first time
          #         after login it shows 'Problémy s přihlášením' and there is the same login form again,
          #         second login works well, because the token3 is set after the first try
          $stderr.puts "token3 was empty, try to log in again... "
          next
        else
          break
        end

      end

      @page = rtr { @m.get('https://www.spsejecna.cz') }
      raise "spse login unsuccessful" unless @page.link_with(text: 'Předměty a tematické plány')

      save_session # force save now
    end

    nil
  end

  def my_classes
    page = rtr { @m.get("https://www.spsejecna.cz/") }

    tridy = []
    page.search('body > div.main > div > div.box.box-dark > ul > li').each do |li|
      href = li.at_css('a[class~=link]')['href']
      if href =~ /\/trida\/(.*?)$/
        tridy << $1
      else
        raise "can't parse name of class from '#{href}'"
      end
    end

    tridy
  end

  # emit Students of a class (the Student object is incomplete, it is not possible to use it for adding/deleting scores)
  def with_class(trida, &block)
    $stderr.puts
    $stderr.puts "loading #{trida} page..."
    page = rtr { @m.get("https://www.spsejecna.cz/trida/#{trida}") }

    page.search('body > div.main > main > div > ul.list > li').each do |li|
      href = li.at_css('a[class=item]')['href']
      if href =~ /([^\/]+)$/
        id = $1
      else
        raise "can't parse student_id"
      end
      name = li.at_css('span[class=label]').text.unicode_normalize(:nfkc)

      block.call Student.new(id, name, nil, nil, nil)
    end
  end

  # emit Students of a class and subject
  def with_class_and_subject(trida, predmet, &block)
    $stderr.puts
    $stderr.puts "loading #{trida} page..."
    page = rtr { @m.get("https://www.spsejecna.cz/trida/#{trida}") }

    $stderr.puts "loading #{predmet} page..."
    link = page.link_with(text: /Známky #{predmet}/i) or raise "no link for 'Známky #{predmet}'"
    page = rtr { @m.click link }

    $stderr.puts

    # process the <table>
    page.search('table[class=score]//tr').each do |tr|

      # process <th>

      id   = tr.at_css('th')['id']
      name = tr.at_css('th>a').text

      # process the first <td>:
      # there is a sequence of
      #  <strong><a><a><a><a><a>...<span><strong><a><a><a><a><a>...<span>
      # the first strong is Cviceni, the last is Teorie, links in between are scores
      # and the span is "+" (used to detailed creation of the score)

      spans = tr.css("span[class='score scores']")

      # (probably) fired students have no '+' to set scores
      if spans.length==2
        vice = lambda do |span| # last link is "Více..." -> will be used to set scores
          links = span.css('a')
          raise "expected 7 links in score scores" unless links.length==7
          links.last['href']
        end
        cviceni_create_url = vice.call(spans[0])
        teorie_create_url  = vice.call(spans[1])
      elsif spans.length==1
        vice = lambda do |span| # last link is "Více..." -> will be used to set scores
          links = span.css('a')
          raise "expected 7 links in score scores" unless links.length==7
          links.last['href']
        end
        teorie_create_url  = vice.call(spans[0])
      else
        cviceni_create_url = nil
        teorie_create_url  = nil
      end

      ct = nil
      scores = []
      tr.at_css('td:first').children.each do |child|

        if child.name == 'strong'

          ct = case child.text
            when /Cvičení:/
              'cviceni'
            when /Teorie:/
              'teorie'
            else
              raise "can't find cviceni/teorie"
          end

        elsif child.name == 'a' && child['title']

          child['title'] =~ /^(.+?)\s+\((\d+.\d+.\d+),\s+[^\)]+\)$/
          description = $1
          date  = $2
          update_url = child['href']

          update_url =~ /scoreId=(\d+)/
          scoreId = $1
          raise "no scoreId" if scoreId.to_s.empty?

          raise "no 'score' in class" if child['class'] !~ /score/
          weight = ( child['class'] =~ /scoreSmall/ ) ? 'small' : 'big'

          value = child.at_css('span[class=value]').text
          employee = child.at_css('span[class=employee]').text

          scores << Score.new(scoreId, ct, description, value, weight, employee, date, update_url)

        end

      end

      block.call Student.new(id, name, scores, cviceni_create_url, teorie_create_url)

    end

    nil
  end

  def csv_export(trida, predmet)
    list = []
    with_class_and_subject(trida, predmet) do |student|
      if student.scores.empty?
# TODO: WTF? proc je tady tohle kdyz nema jeste zadne znamky?
#        list << [
#          trida.upcase, 
#          predmet.upcase, 
#          student.id, 
#          student.name
#        ]
      else
        student.scores.each do |score|
          list << [
            trida.upcase, 
            predmet.upcase, 
            student.id, 
            student.name, 
            score.scoreId, 
            score.ct, 
            score.description, 
            score.value, 
            score.weight, 
            score.employee, 
            score.date
          ]
        end
      end
    end
    list.map(&:to_csv).join
  end

  def csv_all_new(trida, predmet)
    list = []
    with_class_and_subject(trida, predmet) do |student|
      list << [
        trida.upcase, 
        predmet.upcase, 
        student.id, 
        student.name, 
        nil, 
        'cviceni|teorie', 
        'popis', 
        '1|2|3|4|5|N', 
        'small|big'
      ]
    end
    list.map(&:to_csv).join
  end

  def import_csv(input, fuzzy)
    input.gsub!(/^\s*#.*$/, '') # strip comments
    input.gsub!(/^[\s,]*?\n/, '')  # remove empty lines
    apply_list(CSV.new(input).read.uniq, fuzzy)
  end

  def build_index()
    idx = {}

    my_classes.each do |trida|
      with_class(trida) do |student|
        idx[student.id] = [trida.upcase, student.name]
      end
    end

    idx.to_yaml
  end


  private

  def load_session
    @m.cookie_jar = YAML::load_file('spse.session') if File.exists?('spse.session')
  end

  def save_session
    File.open('spse.session','w+') {|f| f.write @m.cookie_jar.to_yaml }
  end

  def rtr max=2, &block
    cnt = 0
    begin
      cnt += 1
      block.call
    rescue Mechanize::ResponseCodeError
      if cnt<=max
        $stderr.puts "error, retry in 20 secs..."
        sleep 20
        retry
      else
        raise "still error, giving up ;-("
      end
    end
  end

  def fill_score_form!(form, w_ct, w_description, w_value, w_weight)

    form.description = w_description

    field = form.field_with(name: 'subjectPartId')
    case w_ct.upcase
      when 'CVICENI'
        field.option_with(text: 'Cvičení').click
      when 'TEORIE'
        field.option_with(text: 'Teorie').click
      else
        raise "error: '#{w_ct}' is not cviceni/teorie"
    end

    field = form.field_with(name: 'weight')
    case w_weight.upcase
      when 'SMALL'
        field.option_with(text: 'Malá známka').click
      when 'BIG'
        field.option_with(text: 'Velká známka').click
      else
        raise "error: '#{w_weight}' is not small/big"
    end

    field = form.field_with(name: 'value')
    case w_value.upcase
      when '1'
        field.option_with(text: 'výborný').click
      when '2'
        field.option_with(text: 'chvalitebný').click
      when '3'
        field.option_with(text: 'dobrý').click
      when '4'
        field.option_with(text: 'dostatečný').click
      when '5'
        field.option_with(text: 'nedostatečný').click
      when 'N'
        field.option_with(text: 'nehodnocen').click
      else
        raise "error: '#{w_value}' is not 1/2/3/4/5/N"
    end

    form
  end

  def update_score(student, score, w_ct, w_description, w_value, w_weight, w_employee)
    ary = []
    ary << "#{score.ct} -> #{w_ct}" if w_ct!=score.ct
    ary << "-> #{w_description}" if w_description!=score.description
    ary << "znamka #{score.value} -> #{w_value}" if w_value!=score.value
    ary << "#{score.weight} -> #{w_weight}" if w_weight!=score.weight
    unless ary.empty?

      if $CONFIG['user_id'] && w_employee && w_employee!=$CONFIG['user_id']
        $stderr.puts "  !!! SKIPPING UPDATE: #{w_description}: #{ary.join(', ')} (#{score.employee}, #{score.date})"
        return
      end

      $stderr.puts "  - UPDATE: #{w_description}: #{ary.join(', ')} (#{score.employee}, #{score.date})"

      raise "can't update score for #{student.name} (no update_url found)" unless score.update_url

      page = rtr { @m.get(score.update_url) }
      form = page.forms.first
      raise "no score form found, can't update" unless form
      fill_score_form!(form, w_ct, w_description, w_value, w_weight)
      unless @dry
         page = rtr { form.submit }
         raise "update unsuccessful?" if page.title !~ /Známky/
      end
    end
  end

  def create_score(student, w_ct, w_description, w_value, w_weight)

    $stderr.puts "  - CREATE: #{w_ct}, #{w_description}, #{w_value}, #{w_weight}"

    url = case w_ct
      when 'cviceni'
        student.cviceni_create_url
      when 'teorie'
        student.teorie_create_url
      else
        raise "error: '#{w_ct}' is not cviceni/teorie"
    end
    raise "ERROR: can't create score for #{student.name} (no create url found)" unless url

    page = rtr { @m.get(url) }
    form = page.forms.first
    fill_score_form!(form, w_ct, w_description, w_value, w_weight)
    unless @dry
      page = rtr { form.submit }
      raise "create unsuccessful?" if page.title !~ /Známky/
    end
  end

  def delete_score(student, score, w_employee)

    if $CONFIG['user_id'] && w_employee!=$CONFIG['user_id']
      $stderr.puts "  !!! SKIPPING DELETE: #{score.ct}, #{score.description}, #{score.value}, #{score.weight} (#{score.employee}, #{score.date})"
      return
    end

    $stderr.puts "  - DELETE: #{score.ct}, #{score.description}, #{score.value}, #{score.weight} (#{score.employee}, #{score.date})"

    page = rtr { @m.get(score.update_url) }
    unless @dry
      page = rtr { @m.click( page.link_with(text: 'Smazat') ) }
      raise "delete unsuccessful?" if page.title !~ /Známky/
    end
  end

  # apply flat array (from CSV)
  def apply_list(list, fuzzy)

    # strip all fields
    list.map! {|x| x.map {|y| y ? y.strip : y }}

    # check for duplicates
    idx = {}
    list.each do |x|
      scoreId = x[4]
      next if ! scoreId
      if idx.has_key?(scoreId)
        raise "duplicate scoreId #{scoreId} found (don not set scoreId to create a new score)"
      end
      idx[scoreId] = true
    end

    # create an index of students by trida/predmet/id
    idx = {}
    list.each do |trida, predmet, id, *x|
      idx[trida.upcase] ||= {}
      idx[trida.upcase][predmet.upcase] ||= {}
      ( idx[trida.upcase][predmet.upcase][id] ||= [] ) << x
    end

    idx.each do |trida, predmety|
      predmety.each do |predmet, scorelist_by_studentid|

        with_class_and_subject(trida, predmet) do |student|
          wanted = scorelist_by_studentid[student.id]
          next unless wanted # student is defined in Trida but not found on the list

          $stderr.puts "#{trida} #{predmet} #{student.name}"

          wanted.each do |item|
            w_name, w_scoreId, w_ct, w_description, w_value, w_weight, w_employee, w_date = *item

            found_score = if fuzzy
              student.scores.find do |score|
                score.scoreId.to_s == w_scoreId.to_s ||
                score.description.to_s.upcase == w_description.to_s.upcase
              end
            else
              student.scores.find do |score|
                score.scoreId.to_s == w_scoreId.to_s
              end
            end

            if found_score
              if w_value.to_s.strip == 'D'
                delete_score(student, found_score, w_employee)
              else
                update_score(student, found_score, w_ct, w_description, w_value, w_weight, w_employee)
              end
            else
              create_score(student, w_ct, w_description, w_value, w_weight)
            end

          end

        end
      end

    end

    nil
  end


end

######

# load and check config
$CONFIG = YAML::load_file('spse.cfg')
%W(user pass user_id).each { |x| raise "no '#{x}' in moodle.cfg" if $CONFIG[x].to_s.empty? }

case ARGV[0]
  when 'debug'
    SPSE.new {|x| x.debug }
  when 'export'
    trida   = ARGV[1]
    predmet = ARGV[2]
    raise "usage: #{$0} export TRIDA PREDMET" unless trida and predmet
    SPSE.new do |x|
      x.login($CONFIG['user'], $CONFIG['pass'])
      puts x.csv_export(trida, predmet)
    end
  when 'new'
    trida   = ARGV[1]
    predmet = ARGV[2]
    raise "usage: #{$0} export TRIDA PREDMET" unless trida and predmet
    SPSE.new do |x|
      x.login($CONFIG['user'], $CONFIG['pass'])
      puts x.csv_all_new(trida, predmet)
    end
  when 'build-index'
    SPSE.new do |x|
      x.login($CONFIG['user'], $CONFIG['pass'])
      puts x.build_index
    end
  when 'import'
    SPSE.new do |x|
      fuzzy = ARGV[1]=='fuzzy'
      x.dry = ARGV.last!='doit'
      x.login($CONFIG['user'], $CONFIG['pass'])
      x.import_csv($stdin.read, fuzzy)
    end
  else
    $stderr.puts
    $stderr.puts "USAGE:"
    $stderr.puts
    $stderr.puts "1. EXPORT FROM PORTAL (SCORES TO BE EDITED)"
    $stderr.puts
    $stderr.puts "   ./spse export C3a PSS >  data.csv"
    $stderr.puts "   ./spse export C3b PSS >> data.csv"
    $stderr.puts
    $stderr.puts "2. OR CREATE NEW ENTRIES (SCORES TO BE INSERTED)"
    $stderr.puts
    $stderr.puts "   ./spse new C3a PSS > data.csv"
    $stderr.puts
    $stderr.puts "3. EDIT THE CSV"
    $stderr.puts
    $stderr.puts "   now change the description, score value, weight, etc."
    $stderr.puts "   by setting the score value to D, the score will be deleted"
    $stderr.puts
    $stderr.puts "4. IMPORT CSV (APPLYING CHANGES TO THE PORTAL)"
    $stderr.puts
    $stderr.puts "   ./spse import [fuzzy] [doit] < data.csv   without the 'doit' it means dry-run"
    $stderr.puts "                                             'fuzzy' matches scoreId or same description"
    $stderr.puts "                                             if score value is set to 'D', the score will be DELETED"
    $stderr.puts
    $stderr.puts "5. CREATE INDEX FOR MOODLE"
    $stderr.puts
    $stderr.puts "   ./spse build-index > moodle.idx           create index of my students"
    $stderr.puts
    $stderr.puts
end
