#!/usr/bin/env ruby

# version 2.7.1 is necessary:
#   gem install roo --version 2.7.1

require 'roo'
require 'yaml'
require 'csv'

name = ARGV[0] or raise "no 'name' specified"

CONFIG = YAML::load_file("#{name}.yml")

# load spse csv from STDIN (created by 'new')
INDEX = {}
csv = CSV.new(STDIN.read).read
csv.each {|row| INDEX[row[3]] = row }   # 3 = "Prijmeni Jmeno"

# load exported ods from moodle
ods = Roo::Spreadsheet.open("#{name}.ods")
SHEET = ods.sheet(0)
SHEET.row(1)[0] == 'Křestní jméno' or raise "expected Krestni jmeno"
SHEET.row(1)[2] == 'Příjmení'      or raise "expected Prijmeni"


###########################################################

def add_scores!(task, defs, scores)
  raise "task '#{task}' has no definition" unless defs.is_a?(Hash)

  task_name = defs['name'] || task
  col_num = SHEET.row(1).index {|x| x =~ /#{task_name}/i } or raise "no matching column for '#{task}' found in the exported ods"

  2.upto(SHEET.last_row) do |row_num|
    row = SHEET.row(row_num)

    full_name = "#{row[2]} #{row[0]}"
    next unless INDEX.has_key?(full_name)

    score = if row[col_num] == '-'
      'N'
    else
      max = defs['max'] || 100
      pct = row[col_num] / max
      if pct>=0.9
        1
      elsif pct>=0.7
        2
      elsif pct>=0.5
        3
      elsif pct>=0.4
        4
      else
        5
      end
    end

    h = scores[full_name] ||= {}
    h[:scores] ||= []

    next if score=='N' and defs['optional']==true

    h[:scores] << score

    if h[:scores].length==1
      # keep 'N' if there is just one score
      h[:score] = h[:scores].first
    else
      # convert 'N' to 5 before calculating an average
      # the average is re-calculates for each score
      sum = h[:scores].sum { |sc| sc=='N' ? 5 : sc }
      h[:score] = sum / h[:scores].length
    end

  end

  nil
end

###########################################################

out = []

if CONFIG.has_key? 'tasks'
  CONFIG['tasks'].each do |task_name, task_defs|

    scores = {}
    add_scores!(task_name, task_defs, scores)
    scores.each do |full_name, score_h|
      next if ! score_h[:score] # was optional
      entry = INDEX[full_name].dup # ["C3A", "PSS", "virva", "Virva Filip", , "cviceni/teorie", "popis", "1-2-3-4-5-N", "small/big"]
      entry[4] = nil
      entry[5] = CONFIG['type']
      entry[6] = task_name
      entry[7] = score_h[:score]
      entry[8] = task_defs['weight'] || 'big'
      out << entry
    end
  end
end

if CONFIG.has_key? 'groups'
  CONFIG['groups'].each do |group_name, group_defs|
    raise "group '#{group_name}' has no definition" unless group_defs.is_a?(Hash)
    scores = {}
    group_defs['tasks'].each { |task_name, task_defs| add_scores!(task_name, task_defs, scores) }
    scores.each do |full_name, score_h|
      next if ! score_h[:score] # was optional
      entry = INDEX[full_name].dup # ["C3A", "PSS", "virva", "Virva Filip", , "cviceni/teorie", "popis", "1-2-3-4-5-N", "small/big"]
      entry[4] = nil
      entry[5] = CONFIG['type']
      entry[6] = group_name
      entry[7] = score_h[:score]
      entry[8] = group_defs['weight'] || 'big'
      out << entry
    end
  end
end

puts out.map(&:to_csv).join
