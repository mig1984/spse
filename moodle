#!/usr/bin/env ruby

require 'logger'
require 'mechanize'
require 'csv'
require 'yaml'

Encoding.default_internal = "utf-8"

class String
  def is_number?
    true if Float(self) rescue false
  end
end

Score = Struct.new(:max, :points)

PortalStudent = Struct.new(:id, :trida, :name)

class Moodle

  def initialize &block
    @m = Mechanize.new
    @m.user_agent_alias = 'Linux Firefox'
    @dry = true
    load_session
    block.call self
    save_session
  end


  def debug
    @m.log = Logger.new($stderr)
    require 'irb'
    binding.irb
  end

  def login(user, pass)
    page = rtr { @m.get('https://moodle.spsejecna.cz/login/index.php') }

    form = page.forms.first  # should be the login form (unless logged-in already)
    if form && form.field_with(:name=>'username')

      $stderr.puts "moodle login... "
      form.username = user
      form.password = pass
      begin
        page = @m.submit(form, form.buttons.first)
      rescue Mechanize::ResponseCodeError
        # submit redirects immediately to /, but gets 403 code; we have to wait a sec
      end
      sleep 2
      page = rtr { @m.get('https://moodle.spsejecna.cz/login/index.php') }

      save_session # force save now

    else
      $stderr.puts "still logged in moodle"
    end
    true
  end

  def export(url)
    page = rtr { @m.get(url) }
    form = page.forms.select { |f| f.button_with(:value=>/Stáhnout|Download/) }.first or raise "no download button found"
    page = @m.submit( form, form.button_with(:name=>'submitbutton') )
    rows = CSV.new(page.body, encoding: "UTF-8").read.uniq

    # check format
    rows[0][0] == 'Příjmení'      or raise "expected Příjmení, got '#{rows[0][1]}'"
    rows[0][1] == 'Křestní jméno' or raise "expected Křestní jméno, got '#{rows[0][0]}'"

    rows
  end

  def build_spse_source(exported_rows, ymlconfig)
    # get only tasks from the ymlconfig
    tasks_or_groups = ymlconfig.dup
    %W(csv_export_url type subject).each { |x| tasks_or_groups.delete(x) }

    out = []

    tasks_or_groups.each do |name, defs|

      if defs.has_key?('tasks')

        # it is a group of tasks

        group_name = name
        group_defs = defs
        scores = {}
        group_defs['tasks'].each { |task_name, task_defs| add_scores!(exported_rows, task_name, task_defs, scores, group_defs) }
        scores.each do |student_id, score_h|
          next if score_h[:scores].empty?      # skip optional

          portal_student = student_lookup(student_id)
          out << [
            portal_student.trida,              # C3A
            ymlconfig['subject'],              # PSS
            portal_student.id,                 # novak3
            portal_student.name,               # Novak Jan
            nil,                               # score id
            ymlconfig['type'],                 # cviceni
            group_name,                        # Routing I, II a III
            calc_final_score( score_h[:scores], group_defs['n']||group_defs['N'] ),  # 3
            group_defs['weight'] || 'big'      # big
          ]
        end

      else

        # it is a task

        task_name = name
        task_defs = defs
        scores = {}
        add_scores!(exported_rows, task_name, task_defs, scores, nil)
        scores.each do |student_id, score_h|
          next if score_h[:scores].empty?      # skip optional

          portal_student = student_lookup(student_id)
          out << [
            portal_student.trida,              # C3A
            ymlconfig['subject'],              # PSS
            portal_student.id,                 # novak3
            portal_student.name,               # Novak Jan
            nil,                               # score id
            ymlconfig['type'],                 # cviceni
            task_name,                         # Ukol: bla bla
            calc_final_score( score_h[:scores], task_defs['n']||task_defs['N'] ),    # 3
            task_defs['weight'] || 'big'       # big
          ]
        end

      end

    end

    out
  end


  private

  def load_session
    begin
       @m.cookie_jar.load('moodle.session')
    rescue Exception
       $stderr.puts $!
    end
  end

  def save_session
    @m.cookie_jar.save('moodle.session', session: true)
  end

  def rtr max=2, &block
    cnt = 0
    begin
      cnt += 1
      block.call
    rescue Mechanize::ResponseCodeError
      if cnt<=max
        $stderr.puts "error, retry in 20 secs..."
        sleep 20
        retry
      else
        raise "still error, giving up ;-("
      end
    end
  end
  
  def find_first_index_with_substring(array, substring)
    array.each_with_index do |str, index|
      return index if str.include?(substring)
    end
    nil
  end

  def add_scores!(exported_rows, task, defs, scores, group_defs=nil)
    raise "task '#{task}' has no definition" unless defs.is_a?(Hash)

    task_name = defs['moodle_name'] || task
    col_num = find_first_index_with_substring(exported_rows.first, task_name) or raise "no matching column for '#{task}' found in exported csv from moodle (#{exported_rows.first.join(', ')})"

    if group_defs
       # this task is a subtask
       # set default points for all subtasks
       default_points = group_defs['default_points'] || 'N' 
    else
       # this is a task
       default_points = 'N'
    end

    exported_rows[1..-1].each do |row|
      full_name = "#{row[0]} #{row[1]}"
      email = row[5]
      email =~ /^(.*?)@spsejecna\.cz$/ or raise "email '#{email}' of '#{full_name}' is not @spsejecna.cz, can't distinguish student_id"
      student_id = $1

      h = scores[student_id] ||= {}
      h[:scores] ||= []

      max = defs['max'] || 100
      if row[col_num].is_number?                # student got some points
         h[:scores] << Score.new(max, row[col_num].to_i)
      else
         next if defs['optional']==true         # task is optional and no points => skip
         h[:scores] << sc = Score.new(max, defs['default']||defs['default_points']||default_points)   # default_points may override group default_points

         #$stderr.puts row.to_s
         #$stderr.puts sc.to_s

      end
    end

    nil
  end

  # n is 1-5-N => instead of N it will set this
  def calc_final_score(scores, n)
    has_n = scores.find { |score| score.points == 'N' } 

    # if there is a task with 'N' (in the task-group or the task itself has no points)
    # => it results in 'N' for the whole group (or the task) unless overridden
    # otherwise if there is no 'N' in the task-group or the task itself has some point
    # => it results in an average

    if has_n

      result = n ? n : 'N'

    else

      sum_of_max = scores.sum(&:max)
      sum_of_points = scores.sum(&:points)
      pct = (sum_of_points.to_f/sum_of_max.to_f)*100

      result = if pct>=90
        1
      elsif pct>=70
        2
      elsif pct>=50
        3
      elsif pct>=40
        4
      else
        5
      end

    end

    result
  end

  def student_lookup(student_id)
    unless @index
      raise "moodle.idx not found, generate it using './spse build-index' and try again" unless File.exists?('moodle.idx')
      @index = YAML::load_file("moodle.idx")
    end
    
    unless @index.has_key?(student_id)
      raise "student_id '#{student_id}' not found in moodle.idx"
    end
    
    PortalStudent.new(student_id, *@index[student_id])
  end

end

######

# load and check config
$CONFIG = YAML::load_file('moodle.cfg')
%W(user pass login_url).each { |x| raise "no '#{x}' in moodle.cfg" if $CONFIG[x].to_s.empty? }

case ARGV[0]
  when 'debug'
    Moodle.new {|x| x.debug }
  when 'export'
    ymlfile = ARGV[1]
    raise "usage: #{$0} export config.yml" unless ymlfile
    ymlconfig = YAML::load_file(ymlfile)
    %W(csv_export_url subject).each { |x| raise "no '#{x}' found in #{ymlfile}" if ymlconfig[x].to_s.empty? }

    Moodle.new do |moodle|
      moodle.login($CONFIG['user'], $CONFIG['pass'])

      if ymlconfig['csv_export_url'].is_a?(Array)

        exported_all = ymlconfig['csv_export_url'].map { |x| moodle.export(x) }

        # first rows are columns; all must be the same
        first_rows = exported_all.map(&:first)
        raise "first rows of exported data do not match; #{first_rows.inspect}" unless first_rows.uniq.one?

        # combine all rows, but keep the first with column names
        exported_rows = exported_all.flat_map.with_index { |x, i| i.zero? ? x : x[1..] }

      else
        exported_rows = moodle.export(ymlconfig['csv_export_url'])
      end

      puts moodle.build_spse_source(exported_rows, ymlconfig).map(&:to_csv).join
    end

  else
    $stderr.puts
    $stderr.puts "USAGE:"
    $stderr.puts
    $stderr.puts "./moodle export pss-c3a.yml > data.csv"
    $stderr.puts
end


